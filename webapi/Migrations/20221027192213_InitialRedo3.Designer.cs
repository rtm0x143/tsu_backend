// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieCatalogBackend.Data.MovieCatalog;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace MovieCatalogBackend.Migrations
{
    [DbContext(typeof(MovieCatalogContext))]
    [Migration("20221027192213_InitialRedo3")]
    partial class InitialRedo3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("RAW(16)");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.FavoriteMovie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("RAW(16)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteMovie");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<short>("AgeLimit")
                        .HasColumnType("NUMBER(5)");

                    b.Property<int?>("Budget")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Country")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Director")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("Fees")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("Poster")
                        .HasMaxLength(8000)
                        .HasColumnType("NCLOB");

                    b.Property<string>("TagLine")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("Time")
                        .HasColumnType("NUMBER(10)");

                    b.Property<short>("Year")
                        .HasColumnType("NUMBER(5)");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<DateTime?>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("RAW(16)");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("NUMBER(1)");

                    b.Property<int>("Rating")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid>("TargetMovieId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TargetMovieId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("RAW(16)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(8000)
                        .HasColumnType("NCLOB");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR2(64)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("NUMBER(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR2(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<byte>("Role")
                        .HasColumnType("NUMBER(3)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR2(64)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MovieCatalogBackend.Data.MovieCatalog.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCatalogBackend.Data.MovieCatalog.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.FavoriteMovie", b =>
                {
                    b.HasOne("MovieCatalogBackend.Data.MovieCatalog.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCatalogBackend.Data.MovieCatalog.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.Review", b =>
                {
                    b.HasOne("MovieCatalogBackend.Data.MovieCatalog.User", "Creator")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieCatalogBackend.Data.MovieCatalog.Movie", "TargetMovie")
                        .WithMany("Reviews")
                        .HasForeignKey("TargetMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("TargetMovie");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.Movie", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieCatalogBackend.Data.MovieCatalog.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
